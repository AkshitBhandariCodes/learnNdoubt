import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.UUID;
import java.security.SecureRandom;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.nio.charset.StandardCharsets;

public class IDPasswordGenerator {

    // Database credentials
    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String USER = "your_username";
    private static final String PASS = "your_password";

    public static void main(String[] args) {
        String name = "John Doe"; // Example name
        String generatedId = generateUniqueId();
        String password = generatePassword();
        storeIdPasswordInDatabase(name, generatedId, password);
    }

    // Method to generate a unique ID
    private static String generateUniqueId() {
        return UUID.randomUUID().toString(); // Generates a random UUID
    }

    // Method to generate a password
    private static String generatePassword() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+";
        SecureRandom random = new SecureRandom();
        StringBuilder password = new StringBuilder();
        for (int i = 0; i < 12; i++) {
            password.append(characters.charAt(random.nextInt(characters.length())));
        }
        return password.toString();
    }

    // Method to hash the password
    private static String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = md.digest(password.getBytes(StandardCharsets.UTF_8));
            StringBuilder hashedPassword = new StringBuilder();
            for (byte b : hashBytes) {
                hashedPassword.append(String.format("%02x", b));
            }
            return hashedPassword.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    // Method to store the ID and password in the database
    private static void storeIdPasswordInDatabase(String name, String generatedId, String password) {
        String hashedPassword = hashPassword(password);
        String insertSQL = "INSERT INTO individuals (name, generated_id, password) VALUES (?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement pstmt = conn.prepareStatement(insertSQL)) {

            pstmt.setString(1, name);
            pstmt.setString(2, generatedId);
            pstmt.setString(3, hashedPassword);
            pstmt.executeUpdate();
            System.out.println("ID and password stored successfully: " + generatedId + ", " + password);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}